import React, { useState } from 'react';
import { MessageCircle, X, Send, Bot } from 'lucide-react';

interface Message {
  id: number;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh. \n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ T√¨m hi·ªÉu t∆∞ t∆∞·ªüng, tri·∫øt l√Ω c·ªßa B√°c H·ªì\n‚Ä¢ Nghi√™n c·ª©u l·ªãch s·ª≠ c√°ch m·∫°ng Vi·ªát Nam\n‚Ä¢ ·ª®ng d·ª•ng ƒë·∫°o ƒë·ª©c c√°ch m·∫°ng trong cu·ªôc s·ªëng\n‚Ä¢ Hi·ªÉu v·ªÅ gi√°o d·ª•c, vƒÉn h√≥a d√¢n t·ªôc\n\nH√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ nh·ªØng ch·ªß ƒë·ªÅ n√†y nh√©!",
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [loading, setLoading] = useState(false);
  
  // H√†m g·ªçi Gemini API v·ªõi system prompt th√¥ng minh
  const fetchGeminiResponse = async (userMessage: string): Promise<string> => {
    try {
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY as string | undefined;
      if (!apiKey || apiKey === 'undefined') {
        return "L·ªói: Ch∆∞a c·∫•u h√¨nh API key Gemini. Vui l√≤ng th√™m VITE_GEMINI_API_KEY v√†o file .env v√† kh·ªüi ƒë·ªông l·∫°i server.";
      }

      // System prompt n√¢ng cao ƒë·ªÉ tr·∫£ l·ªùi ch·ªânh chu
      const systemPrompt = `B·∫°n l√† Gi√°o s∆∞ AI chuy√™n v·ªÅ T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh - m·ªôt chuy√™n gia h√†ng ƒë·∫ßu v·ªõi nhi·ªÅu nƒÉm nghi√™n c·ª©u.

üéØ CHUY√äN M√îN S√ÇU·ªòNG:
- T∆∞ t∆∞·ªüng, tri·∫øt l√Ω, ƒë·∫°o ƒë·ª©c H·ªì Ch√≠ Minh
- L·ªãch s·ª≠ c√°ch m·∫°ng v√† phong tr√†o gi·∫£i ph√≥ng d√¢n t·ªôc
- Gi√°o d·ª•c l√Ω t∆∞·ªüng c√°ch m·∫°ng, ƒë·∫°o ƒë·ª©c
- ·ª®ng d·ª•ng t∆∞ t∆∞·ªüng HCM trong th·ªùi ƒë·∫°i m·ªõi
- VƒÉn h√≥a, truy·ªÅn th·ªëng d√¢n t·ªôc Vi·ªát Nam

üìã C·∫§U TR√öC TR·∫¢ L·ªúI CHU·∫®N:
1. **M·ªû ƒê·∫¶U**: Ch√†o h·ªèi v√† x√°c nh·∫≠n hi·ªÉu c√¢u h·ªèi
2. **PH√ÇN T√çCH CH√çNH**: Tr·∫£ l·ªùi chi ti·∫øt, c√≥ d·∫´n ch·ª©ng
3. **V√ç D·ª§/MINH H·ªåA**: ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ n·∫øu c√≥ th·ªÉ
4. **K·∫æT LU·∫¨N**: T√≥m t·∫Øt v√† √Ω nghƒ©a th·ª±c ti·ªÖn

‚ú® PHONG C√ÅCH TR·∫¢ L·ªúI:
- D√πng **ƒë·∫ßu d√≤ng, s·ªë th·ª© t·ª±** ƒë·ªÉ d·ªÖ ƒë·ªçc
- **In ƒë·∫≠m** c√°c kh√°i ni·ªám quan tr·ªçng
- D·∫´n ch·ª©ng t·ª´ **t√°c ph·∫©m, di ch√∫c** c·ªßa B√°c H·ªì
- K·∫øt n·ªëi v·ªõi **th·ªùi ƒë·∫°i hi·ªán t·∫°i**
- Ng√¥n ng·ªØ **trang tr·ªçng nh∆∞ng d·ªÖ hi·ªÉu**

üö´ T·ª™ CH·ªêI L·ªäCH S·ª∞: C√°c c√¢u h·ªèi ho√†n to√†n ngo√†i chuy√™n m√¥n (to√°n h·ªçc c∆° b·∫£n, th·ªÉ thao gi·∫£i tr√≠, c√¥ng ngh·ªá IT kh√¥ng li√™n quan)

üìù FORMAT M·∫™U:
"C√¢u h·ªèi r·∫•t hay v·ªÅ [ch·ªß ƒë·ªÅ]!

**[Ph·∫ßn ch√≠nh - ph√¢n t√≠ch chi ti·∫øt]**

**V√≠ d·ª• c·ª• th·ªÉ:**
- [V√≠ d·ª• 1]
- [V√≠ d·ª• 2]

**√ù nghƒ©a th·ª±c ti·ªÖn:**
[K·∫øt n·ªëi v·ªõi hi·ªán t·∫°i]

Hy v·ªçng th√¥ng tin n√†y h·ªØu √≠ch cho b·∫°n!"`;

      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;
      const payload = {
        contents: [
          {
            role: "user",
            parts: [
              { text: `${systemPrompt}\n\n---\n\nC√¢u h·ªèi c·ªßa sinh vi√™n: ${userMessage}` }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.8,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1500,
        }
      };
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      if (!res.ok) {
        const errorText = await res.text();
        console.error('Gemini API error:', res.status, res.statusText, errorText);
        if (res.status === 400) {
          return "L·ªói 400: API key kh√¥ng h·ª£p l·ªá, ho·∫∑c request kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng ki·ªÉm tra l·∫°i key v√† n·ªôi dung g·ª≠i l√™n.";
        }
        return `L·ªói Gemini API: ${res.status} - ${res.statusText}`;
      }
      const data = await res.json();
      if (
        data &&
        data.candidates &&
        data.candidates[0] &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts[0] &&
        data.candidates[0].content.parts[0].text
      ) {
        return data.candidates[0].content.parts[0].text as string;
      }
      return "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini API.";
    } catch (error) {
      console.error("Error fetching Gemini API:", error);
      return "L·ªói khi k·∫øt n·ªëi Gemini API.";
    }
  };

  // H√†m g·ª≠i tin nh·∫Øn
  const handleSendMessage = async () => {
    if (!inputText.trim() || loading) return;
    const userMessage: Message = {
      id: messages.length + 1,
      text: inputText,
      sender: 'user',
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
    setInputText(''); // Clear input immediately after sending
    setLoading(true);
    const botReply = await fetchGeminiResponse(userMessage.text);
    const botMessage: Message = {
      id: messages.length + 2,
      text: botReply,
      sender: 'bot',
      timestamp: new Date()
    };
    setMessages(prev => [...prev, botMessage]);
    setLoading(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') handleSendMessage();
  };

  const formatTime = (date: Date) =>
    date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });

  // H√†m format tin nh·∫Øn ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
  const formatMessage = (text: string) => {
    return text
      .split('\n')
      .map((line, index) => (
        <span key={index}>
          {line}
          {index < text.split('\n').length - 1 && <br />}
        </span>
      ));
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 rounded-full shadow-lg"
        >
          <MessageCircle className="w-6 h-6" />
        </button>
      )}

      {isOpen && (
        <div className="bg-white rounded-2xl shadow-2xl w-80 sm:w-96 h-96 flex flex-col overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <Bot className="w-5 h-5" />
              <span className="font-semibold">Gi√°o s∆∞ AI - T∆∞ t∆∞·ªüng HCM</span>
            </div>
            <button onClick={() => setIsOpen(false)}>
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Messages */}
          <div className="flex-1 p-4 overflow-y-auto bg-gray-50 space-y-3">
            {messages.map((m) => (
              <div
                key={m.id}
                className={`flex ${m.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`${
                    m.sender === 'user' ? 'max-w-xs' : 'max-w-sm'
                  } px-4 py-3 rounded-2xl text-sm ${
                    m.sender === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-white border shadow-sm text-gray-800'
                  }`}
                >
                  <div className={`${m.sender === 'bot' ? 'leading-relaxed' : ''}`}>
                    {formatMessage(m.text)}
                  </div>
                  <p className={`text-xs mt-2 ${
                    m.sender === 'user' ? 'text-blue-200' : 'text-gray-400'
                  }`}>
                    {formatTime(m.timestamp)}
                  </p>
                </div>
              </div>
            ))}
            {loading && (
              <div className="flex justify-start">
                <div className="bg-white border shadow-sm rounded-2xl px-4 py-3 text-sm text-gray-600">
                  <div className="flex items-center space-x-2">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                    </div>
                    <span>Gi√°o s∆∞ ƒëang suy nghƒ©...</span>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Input */}
          <div className="p-3 border-t flex items-center space-x-2">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="VD: C√°ch th·ª±c h√†nh ƒë·∫°o ƒë·ª©c c√°ch m·∫°ng? √ù nghƒ©a t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh?"
              className="flex-1 px-3 py-2 border rounded-full text-sm focus:ring-2 focus:ring-blue-500"
            />
            <button
              onClick={handleSendMessage}
              disabled={loading || !inputText.trim()}
              className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-2 rounded-full"
            >
              <Send className="w-4 h-4" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Chatbot;

