import React, { useState } from 'react';
import { CheckCircle, XCircle, RotateCcw, Trophy, Gamepad2, Star } from 'lucide-react';

const quizData = [
  {
    question: 'Theo t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh, y·∫øu t·ªë n√†o ƒë∆∞·ª£c coi l√† "g·ªëc" v√† l√† n·ªÅn t·∫£ng v·ªØng ch·∫Øc nh·∫•t cho s·ª± t·ªìn t·∫°i v√† l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng c·∫ßm quy·ªÅn?',
    options: [
      'A. S·ª©c m·∫°nh qu√¢n s·ª± v√† qu·ªëc ph√≤ng.',
      'B. S·ª± ·ªßng h·ªô c·ªßa c√°c ƒë·ªìng minh qu·ªëc t·∫ø.',
      'C. N·ªÅn t·∫£ng kinh t·∫ø v·ªØng m·∫°nh.',
      'D. Ni·ªÅm tin v√† s·ª± ƒëo√†n k·∫øt c·ªßa nh√¢n d√¢n.'
    ],
    answer: 3,
    explanation: '"Trong b·∫ßu tr·ªùi kh√¥ng g√¨ qu√Ω b·∫±ng nh√¢n d√¢n. Trong th·∫ø gi·ªõi kh√¥ng g√¨ m·∫°nh b·∫±ng l·ª±c l∆∞·ª£ng ƒëo√†n k·∫øt c·ªßa nh√¢n d√¢n". "D√¢n l√† g·ªëc" v√† ni·ªÅm tin c·ªßa nh√¢n d√¢n l√† ch·ªó d·ª±a v·ªØng ch·∫Øc ƒë·ªÉ ƒê·∫£ng t·ªìn t·∫°i.'
  },
  {
    question: 'Sinh th·ªùi, Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë√£ ch·ªâ ra ba nguy c∆° l·ªõn nh·∫•t c√≥ th·ªÉ d·∫´n ƒë·∫øn s·ª± suy tho√°i, bi·∫øn ch·∫•t c·ªßa m·ªôt ƒê·∫£ng c·∫ßm quy·ªÅn l√† g√¨?',
    options: [
      'A. ƒê·∫•u ƒë√° phe ph√°i, ch·ªß nghƒ©a c√° nh√¢n v√† kinh t·∫ø ch·∫≠m ph√°t tri·ªÉn.',
      'B. Quan li√™u, tham nh≈©ng v√† xa r·ªùi qu·∫ßn ch√∫ng.',
      'C. S·ª± can thi·ªáp t·ª´ b√™n ngo√†i, kh·ªßng ho·∫£ng kinh t·∫ø v√† thi√™n tai.',
      'D. T·ª•t h·∫≠u v·ªÅ c√¥ng ngh·ªá, thi·∫øu c√°n b·ªô k·∫ø c·∫≠n v√† m√¢u thu·∫´n x√£ h·ªôi.'
    ],
    answer: 1,
    explanation: '"Quan li√™u... Tham nh≈©ng... Xa r·ªùi qu·∫ßn ch√∫ng" l√† nh·ªØng "cƒÉn b·ªánh" c√≥ th·ªÉ l√†m ƒê·∫£ng m·∫•t ƒëi l√≤ng tin c·ªßa d√¢n.'
  },
  {
    question: 'Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë√£ v√≠ tham nh≈©ng v·ªõi h√¨nh ·∫£nh n√†o ƒë·ªÉ nh·∫•n m·∫°nh m·ª©c ƒë·ªô nguy hi·ªÉm c·ªßa n√≥ ƒë·ªëi v·ªõi ƒê·∫£ng v√† ch·∫ø ƒë·ªô?',
    options: [
      'A. "M·ªôt cƒÉn b·ªánh m√£n t√≠nh kh√≥ ch·ªØa".',
      'B. "K·∫ª th√π n·ªôi x√¢m".',
      'C. "M·ªôt t·∫£ng bƒÉng ch√¨m".',
      'D. "Con s√¢u l√†m r·∫ßu n·ªìi canh".'
    ],
    answer: 1,
    explanation: '"B√°c H·ªì coi tham nh≈©ng l√† k·∫ª th√π n·ªôi x√¢m, l√† gi·∫∑c ·ªü trong l√≤ng".'
  },
  {
    question: 'Th·ª±c ti·ªÖn ƒë·∫•u ƒë√°, tranh gi√†nh ·∫£nh h∆∞·ªüng trong n·ªôi b·ªô ƒê·∫£ng C·ªông s·∫£n c·∫ßm quy·ªÅn ·ªü Nepal ƒë√£ ƒëi ng∆∞·ª£c l·∫°i nguy√™n t·∫Øc c·ªët l√µi n√†o trong t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªÅ x√¢y d·ª±ng ƒê·∫£ng?',
    options: [
      'A. Nguy√™n t·∫Øc t·∫≠p trung d√¢n ch·ªß.',
      'B. Nguy√™n t·∫Øc "d√¢n l√† g·ªëc".',
      'C. Nguy√™n t·∫Øc "ƒëo√†n k·∫øt, th·ªëng nh·∫•t trong ƒê·∫£ng".',
      'D. Nguy√™n t·∫Øc t·ª± ph√™ b√¨nh v√† ph√™ b√¨nh.'
    ],
    answer: 2,
    explanation: 'ƒêi·ªÅu n√†y ƒëi ng∆∞·ª£c l·∫°i v·ªõi nguy√™n t·∫Øc "ƒëo√†n k·∫øt, th·ªëng nh·∫•t trong ƒê·∫£ng".'
  },
  {
    question: 'H·∫≠u qu·∫£ tr·ª±c ti·∫øp c·ªßa vi·ªác ƒê·∫£ng c·∫ßm quy·ªÅn ·ªü Nepal sa v√†o quan li√™u, tham nh≈©ng v√† ƒë·∫•u ƒë√° n·ªôi b·ªô, d·∫´n ƒë·∫øn m·∫•t l√≤ng tin c·ªßa nh√¢n d√¢n l√† g√¨?',
    options: [
      'A. Kinh t·∫ø ph√°t tri·ªÉn v∆∞·ª£t b·∫≠c nh·ªù s·ª± can thi·ªáp c·ªßa qu·ªëc t·∫ø.',
      'B. Ch·∫ø ƒë·ªô qu√¢n ch·ªß ƒë∆∞·ª£c ph·ª•c h·ªìi.',
      'C. B·∫•t ·ªïn ch√≠nh tr·ªã k√©o d√†i v√† s·ª± tr·ªói d·∫≠y c·ªßa c√°c ƒë·∫£ng ph√°i m·ªõi.',
      'D. C√°c ƒë·∫£ng truy·ªÅn th·ªëng c·ªßng c·ªë ƒë∆∞·ª£c v·ªã th·∫ø v√† ƒëo√†n k·∫øt h∆°n.'
    ],
    answer: 2,
    explanation: 'S·ª± b·∫•t ·ªïn ch√≠nh tr·ªã k√©o d√†i v√† c√°c ƒë·∫£ng truy·ªÅn th·ªëng m·∫•t d·∫ßn s·ª± ·ªßng h·ªô v√†o tay c√°c ƒë·∫£ng ph√°i v√† c√° nh√¢n m·ªõi n·ªïi.'
  },
  {
    question: 'Theo Ch·ªß t·ªãch H·ªì Ch√≠ Minh, khi m·ªôt ƒê·∫£ng c·∫ßm quy·ªÅn "c√°ch xa d√¢n ch√∫ng", ƒëi·ªÅu g√¨ s·∫Ω l√† m·∫•t m√°t l·ªõn nh·∫•t v√† quy·∫øt ƒë·ªãnh s·ª± th·∫•t b·∫°i c·ªßa ƒê·∫£ng?',
    options: [
      'A. M·∫•t quy·ªÅn ki·ªÉm so√°t n·ªÅn kinh t·∫ø.',
      'B. M·∫•t s·ª± ·ªßng h·ªô c·ªßa qu·ªëc t·∫ø.',
      'C. M·∫•t ƒëo√†n k·∫øt trong n·ªôi b·ªô ƒê·∫£ng.',
      'D. M·∫•t l√≤ng tin c·ªßa nh√¢n d√¢n.'
    ],
    answer: 3,
    explanation: '‚Äúc√°ch xa d√¢n ch√∫ng, kh√¥ng li√™n h·ªá ch·∫∑t ch·∫Ω v·ªõi d√¢n ch√∫ng... nh·∫•t ƒë·ªãnh th·∫•t b·∫°i. M·∫•t l√≤ng tin l√† m·∫•t t·∫•t c·∫£‚Äù.'
  },
  {
    question: 'V√≠ d·ª• t·ª´ cu·ªôc kh·ªßng ho·∫£ng ch√≠nh tr·ªã ·ªü Nepal ƒë√£ ch·ª©ng minh nh·ªØng l·ªùi c·∫£nh b√°o c·ªßa Ch·ªß t·ªãch H·ªì Ch√≠ Minh kh√¥ng ch·ªâ l√† l√Ω lu·∫≠n m√† c√≤n l√† g√¨?',
    options: [
      'A. M·ªôt d·ª± b√°o ch√≠nh tr·ªã mang t√≠nh th·ªùi ƒëi·ªÉm.',
      'B. M·ªôt kinh nghi·ªám ch·ªâ ƒë√∫ng v·ªõi b·ªëi c·∫£nh Vi·ªát Nam.',
      'C. M·ªôt gi·∫£ thuy·∫øt c·∫ßn th√™m th·ªùi gian ki·ªÉm ch·ª©ng.',
      'D. M·ªôt quy lu·∫≠t th·ª±c ti·ªÖn kh·∫Øc nghi·ªát.'
    ],
    answer: 3,
    explanation: 'V√≠ d·ª• t·ª´ Nepal cho th·∫•y m·ªôt c√°ch s·ªëng ƒë·ªông r·∫±ng nh·ªØng l·ªùi c·∫£nh b√°o c·ªßa Ch·ªß t·ªãch H·ªì Ch√≠ Minh kh√¥ng ch·ªâ l√† l√Ω lu·∫≠n m√† l√† m·ªôt quy lu·∫≠t th·ª±c ti·ªÖn kh·∫Øc nghi·ªát.'
  },
  {
    question: 'Theo t√†i li·ªáu, vi·ªác ph√¢n t√≠ch c√°c v√≠ d·ª• qu·ªëc t·∫ø nh∆∞ Nepal c√≥ √Ω nghƒ©a g√¨ ƒë·ªëi v·ªõi sinh vi√™n Vi·ªát Nam?',
    options: [
      'A. T√¨m ki·∫øm c√°c m√¥ h√¨nh ch√≠nh tr·ªã m·ªõi ƒë·ªÉ thay th·∫ø m√¥ h√¨nh hi·ªán t·∫°i.',
      'B. Nh·∫≠n th·ª©c r√µ h∆°n tr√°ch nhi·ªám x√¢y d·ª±ng m·ªôt ƒê·∫£ng "l√† ƒë·∫°o ƒë·ª©c, l√† vƒÉn minh".',
      'C. TƒÉng c∆∞·ªùng giao l∆∞u, h·ªçc h·ªèi kinh nghi·ªám ph√°t tri·ªÉn kinh t·∫ø c·ªßa Nepal.',
      'D. Ch·ªâ tr√≠ch c√°c th·∫•t b·∫°i c·ªßa h·ªá th·ªëng ch√≠nh tr·ªã c√°c n∆∞·ªõc kh√°c.'
    ],
    answer: 1,
    explanation: '...nh·∫≠n th·ª©c r√µ h∆°n tr√°ch nhi·ªám c·ªßa ƒê·∫£ng v√† c·ªßa th·∫ø h·ªá tr·∫ª trong vi·ªác x√¢y d·ª±ng m·ªôt ƒê·∫£ng th·ª±c s·ª± "l√† ƒë·∫°o ƒë·ª©c, l√† vƒÉn minh", g·∫Øn b√≥ m√°u th·ªãt v·ªõi nh√¢n d√¢n.'
  }
];

const Interactive = () => {
  const [currentQuiz, setCurrentQuiz] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [quizCompleted, setQuizCompleted] = useState(false);

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
  };

  const handleSubmit = () => {
    if (selectedAnswer === null) return;
    
    setShowResult(true);
    if (selectedAnswer === quizData[currentQuiz].answer) {
      setScore(score + 1);
    }
  };

  const handleNext = () => {
    if (currentQuiz < quizData.length - 1) {
      setCurrentQuiz(currentQuiz + 1);
      setSelectedAnswer(null);
      setShowResult(false);
    } else {
      setQuizCompleted(true);
    }
  };

  const resetQuiz = () => {
    setCurrentQuiz(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setScore(0);
    setQuizCompleted(false);
  };

  const getScoreColor = () => {
    const percentage = (score / quizData.length) * 100;
    if (percentage >= 80) return 'from-green-500 to-emerald-600';
    if (percentage >= 60) return 'from-yellow-500 to-orange-600';
    return 'from-red-500 to-pink-600';
  };

  const getScoreMessage = () => {
    const percentage = (score / quizData.length) * 100;
    if (percentage >= 80) return 'Excellent work! üéâ';
    if (percentage >= 60) return 'Good job! Keep learning! üëç';
    return 'Keep practicing! You\'ll improve! üí™';
  };

  if (quizCompleted) {
    return (
      <div className="min-h-screen py-8 flex items-center justify-center">
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="bg-white rounded-2xl shadow-2xl p-8 text-center">
            <div className={`inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r ${getScoreColor()} rounded-full mb-6`}>
              <Trophy className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-4">Quiz Completed!</h1>
            <p className="text-xl text-gray-600 mb-6">{getScoreMessage()}</p>
            <div className="bg-gray-50 rounded-xl p-6 mb-8">
              <div className="text-4xl font-bold text-gray-900 mb-2">
                {score} / {quizData.length}
              </div>
              <div className="text-lg text-gray-600">
                {Math.round((score / quizData.length) * 100)}% Correct
              </div>
            </div>
            <button
              onClick={resetQuiz}
              className="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-8 py-3 rounded-full font-semibold hover:from-blue-600 hover:to-purple-700 transition-all duration-200 flex items-center justify-center space-x-2 mx-auto shadow-lg hover:shadow-xl transform hover:-translate-y-1"
            >
              <RotateCcw className="w-5 h-5" />
              <span>Try Again</span>
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen py-8">
      {/* Header */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 mb-8">
        <div className="text-center">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-green-500 to-teal-600 rounded-2xl mb-6">
            <Gamepad2 className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
            Interactive Learning
          </h1>
          <p className="text-xl text-gray-600">
            Test your knowledge and learn through engaging quizzes
          </p>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 mb-8">
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex justify-between items-center mb-4">
            <span className="text-lg font-semibold text-gray-700">
              Question {currentQuiz + 1} of {quizData.length}
            </span>
            <div className="flex items-center space-x-2">
              <Star className="w-5 h-5 text-yellow-500" />
              <span className="font-semibold text-gray-700">Score: {score}</span>
            </div>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <div
              className="bg-gradient-to-r from-green-500 to-teal-600 h-3 rounded-full transition-all duration-500"
              style={{ width: `${((currentQuiz + 1) / quizData.length) * 100}%` }}
            ></div>
          </div>
        </div>
      </div>

      {/* Quiz Card */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-8 leading-relaxed">
            {quizData[currentQuiz].question}
          </h2>

          <div className="space-y-4 mb-8">
            {quizData[currentQuiz].options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswerSelect(index)}
                disabled={showResult}
                className={`w-full text-left p-6 rounded-xl border-2 transition-all duration-200 ${
                  selectedAnswer === index
                    ? showResult
                      ? index === quizData[currentQuiz].answer
                        ? 'border-green-500 bg-green-50 text-green-800'
                        : 'border-red-500 bg-red-50 text-red-800'
                      : 'border-blue-500 bg-blue-50 text-blue-800'
                    : showResult && index === quizData[currentQuiz].answer
                    ? 'border-green-500 bg-green-50 text-green-800'
                    : 'border-gray-200 bg-white text-gray-700 hover:border-blue-300 hover:bg-blue-50'
                }`}
              >
                <div className="flex items-center justify-between">
                  <span className="font-medium">{option}</span>
                  {showResult && (
                    <div className="flex items-center">
                      {index === quizData[currentQuiz].answer ? (
                        <CheckCircle className="w-6 h-6 text-green-600" />
                      ) : selectedAnswer === index ? (
                        <XCircle className="w-6 h-6 text-red-600" />
                      ) : null}
                    </div>
                  )}
                </div>
              </button>
            ))}
          </div>

          {showResult && (
            <div className="bg-gray-50 rounded-xl p-6 mb-8">
              <div className="flex items-start space-x-3">
                <div className="flex-shrink-0">
                  {selectedAnswer === quizData[currentQuiz].answer ? (
                    <CheckCircle className="w-6 h-6 text-green-600 mt-0.5" />
                  ) : (
                    <XCircle className="w-6 h-6 text-red-600 mt-0.5" />
                  )}
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-2">
                    {selectedAnswer === quizData[currentQuiz].answer ? 'Correct!' : 'Not quite right'}
                  </h3>
                  <p className="text-gray-600">{quizData[currentQuiz].explanation}</p>
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-center space-x-4">
            {!showResult ? (
              <button
                onClick={handleSubmit}
                disabled={selectedAnswer === null}
                className={`px-8 py-3 rounded-full font-semibold transition-all duration-200 ${
                  selectedAnswer !== null
                    ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 shadow-lg hover:shadow-xl transform hover:-translate-y-1'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                }`}
              >
                Submit Answer
              </button>
            ) : (
              <button
                onClick={handleNext}
                className="bg-gradient-to-r from-green-500 to-teal-600 text-white px-8 py-3 rounded-full font-semibold hover:from-green-600 hover:to-teal-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
              >
                {currentQuiz < quizData.length - 1 ? 'Next Question' : 'Finish Quiz'}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Interactive;